name: Generate Next Version Tag

on:
  push:
    branches:
      - main

jobs:
  generate-version-tag:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Read current version and generate new build number
        id: versioning
        run: |
          MAJOR=$(cat VERSION | tr -d '\n')
          NOW=$(TZ=UTC date +%y.%m)
          PREFIX=v$MAJOR.$NOW
          echo "Finding latest build for $PREFIX" >&2
          LATEST=$(git tag -l "$PREFIX*" | sort -r | head -1)
          if [[ $LATEST ]]; then
              echo "Found $LATEST" >&2
              PARTS=( ${LATEST//./ } )
              NEXT_BUILD=$((10#${PARTS[3]}+ 1))
              NEW_BUILD_NUM="$(printf %04d $NEXT_BUILD)"
          else
              echo "No build found. Starting a new series." >&2
              NEW_BUILD_NUM="0001"
          fi
          echo "NEW_VERSION=$PREFIX.$NEW_BUILD_NUM" >> $GITHUB_ENV

      - name: Print new version
        run: echo "New version is ${{ env.NEW_VERSION }}"


  generate-version:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Generate Next Version
        id: generate-version
        run: |
          if latest_version=$(git describe --tags `git rev-list --tags --max-count=1`)
          else
            latest_version=""
          fi
          
          # Extract major, minor, and patch numbers from the latest version tag
          regex="^([0-9]+)\.([0-9]+)\.([0-9]+)$"
          if [[ $latest_version =~ $regex ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              patch="${BASH_REMATCH[3]}"
          else
              major="1"
              minor="0"
              patch="0"
          fi
          
          # Increment the patch number to generate the next version
          next_patch=$((patch + 1))
          new_version="${major}.${minor}.${next_patch}"
          
          echo "::set-output name=new_version::$new_version"
        
      - name: Use the New Version
        run: |
          echo "Next version is ${{ steps.generate-version.outputs.new_version }}"
